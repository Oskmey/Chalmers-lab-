# package exercises
#  * Program for Conway's game of life.
#  * See https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life
# Any live cell with fewer than two live neighbours dies, as if by underpopulation.
# Any live cell with two or three live neighbours lives on to the next generation.
# Any live cell with more than three live neighbours dies, as if by overpopulation.
# Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.
#  * This is a graphical program using pygame to draw on the screen.
#  * There's a bit of "drawing" code to make this happen (far below).
#  * You don't need to implement (or understand) any of it.
#  * NOTE: To run tests must uncomment in init() method, see comment
#  *
#  * Use functional decomposition!
#  *
#  * See:
#  * - UseEnum
#  * - PygameSample (don't need to understand, just if you're curious)
from math import sqrt
from typing import List
import pygame
from enum import Enum
from random import shuffle
# Main program
def game_of_life():
    pygame.init()
    world = World()
    GameOfLifeView(world)
    world.run()

def define_new_status(nr_of_live_neigbours, status):
    if nr_of_live_neigbours == 3 or nr_of_live_neigbours == 2 and status == Cell.ALIVE:
        return Cell.ALIVE
    return Cell.DEAD

class Cell(Enum):
    DEAD = 0
    ALIVE = 1




class World:

    def __init__(self):
        #test()  # <--------------- Uncomment to test!
        n_locations = 10000
        distribution = 0.15  # % of locations holding a Cell
        self.all_cells: List[List[Cell]] = []
        self.size = 0
        self.observers = []
        self.create_world(n_locations, distribution)
        self.clock = pygame.time.Clock()

    def create_world(self, n_locations, distribution):
        self.all_cells = []  # TODO Create and populate world
        flat_all_cells = self.create_flat_world(distribution, n_locations)
        self.size = int(sqrt(n_locations))
        self.flat_list_to_matrix(flat_all_cells)

    def create_flat_world(self, distribution, n_locations):
        alive_cells = [Cell.ALIVE] * int((n_locations * distribution))
        dead_cells = [Cell.DEAD] * int(((1 - distribution) * n_locations))
        flat_all_cells = alive_cells + dead_cells
        shuffle(flat_all_cells)
        return flat_all_cells

    def flat_list_to_matrix(self, flat_all_cells):
        self.all_cells = [flat_all_cells[row_count * self.size:(row_count + 1) * self.size] for row_count in range(self.size)]


    def add_observer(self, observer):
        self.observers.append(observer)

    def notify_observers(self):
        for observer in self.observers:
            observer.notify()

    def update(self):
        self.generate_new_world()
        # TODO Update (logically) the world
        self.notify_observers()  # Tell the view to render

    def generate_new_world(self):
        new_all_cells = []
        for row_num in range(self.size):
            new_row = []
            for col_num in range(self.size):
                new_satus = self.calculate_new_status(row_num, col_num)
                new_row.append(new_satus)
            new_all_cells.append(new_row)
        self.all_cells = new_all_cells


    def run(self):
        # Variable to keep the main loop running
        running = True
        # Main loop
        while running:
            self.update()
            # Ensure program maintains a rate of 2 frames per second
            self.clock.tick(50)
            # Look at every event in the queue
            for event in pygame.event.get():
                # Did the user hit a key?
                if event.type == pygame.QUIT:
                    running = False

    def calculate_new_status(self, row_num, col_num):
        status = self.all_cells[row_num][col_num]
        nr_of_live_neigbours = self.count_live_neigbours(row_num,col_num)
        new_status = define_new_status(nr_of_live_neigbours, status)
        return new_status

    # -------- Write methods below this --------------
    def count_live_neigbours(self, row_num, col_num):
        start_row_num, end_row_num = (max(0,row_num-1), min(self.size, row_num+2))
        start_col_num, end_col_num = (max(0,col_num-1), min(self.size, col_num+2))
        nr_of_live = 0
        for i in range(start_row_num, end_row_num):
            for j in range(start_col_num, end_col_num):
                if not (i == row_num and j == col_num):
                    if self.all_cells[i][j] == Cell.ALIVE:
                        nr_of_live +=1
        return nr_of_live

# ---------- Testing -----------------
# Here you run your tests i.e. call your logic methods
# to see that they really work



# uppdatera
# ny inmatare


# TODO tests!


# -------- Below is Pygame View stuff, nothing to do --------------
class GameOfLifeView:
    SCREEN_WIDTH = 400
    SCREEN_HEIGHT = 400

    def __init__(self, world_ref: World):
        self.the_world = world_ref
        self.screen = pygame.display.set_mode((self.SCREEN_WIDTH, self.SCREEN_HEIGHT))
        self.the_world.add_observer(self)

    def notify(self):
        self.render()

    def render(self):
        self.screen.fill((0, 0, 0))
        size = len(self.the_world.all_cells)
        for row in range(size):
            for col in range(size):
                x = 3 * col + 50
                y = 3 * row + 50
                self.render_cell(x, y, self.the_world.all_cells[row][col])

        pygame.display.flip()

    def render_cell(self, x, y, cell: Cell):
        if cell == Cell.ALIVE:
            color = (251, 221, 130)
        else:
            color = (0, 0, 110)
        surf = pygame.Surface((3, 3))
        surf.fill(color)
        self.screen.blit(surf, (x, y))


if __name__ == "__main__":
    game_of_life()
