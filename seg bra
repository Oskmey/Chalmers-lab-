
import copy
from turtle import color, update
from typing import List, Tuple
from enum import Enum, auto
from random import *
import pygame as pg
from math import ceil, sqrt

#  Program to simulate segregation.
#  See : http:#nifty.stanford.edu/2014/mccown-schelling-model-segregation/
#

# Enumeration type for the Actors
class Actor(Enum):
    BLUE = auto()
    RED = auto()
    NONE = auto()  # NONE used for empty locations

# Enumeration type for the state of an Actor
class State(Enum):
    UNSATISFIED = auto()
    SATISFIED = auto()
    NA = auto()  # Not applicable (NA), used for NONEs


World = List[List[Actor]]  # Type alias


SIZE = 600


def neighbours():
    pg.init()
    model = NeighborsModel(SIZE)
    _view = NeighboursView(model)
    model.run()

def create_flat_list(size):
    all_red = [Actor.RED] * int(size * NeighborsModel.DIST[0])
    all_blue = [Actor.BLUE] * int(size * NeighborsModel.DIST[1])
    all_none = [Actor.NONE] * ceil(size * NeighborsModel.DIST[2])
    flat_list_actors = all_none + all_red + all_blue
    shuffle(flat_list_actors)
    return flat_list_actors

class NeighborsModel:

    # Tune these numbers to test different distributions or update speeds
    SIDE = 0
    FRAME_RATE = 20            # Increase number to speed simulation up
    DIST = [0.25, 0.25, 0.50]  # % of RED, BLUE, and NONE
    THRESHOLD = 0.7            # % of surrounding neighbours that should be like me for satisfaction
    NR_OF_BLUE = 0
    NR_OF_RED = 0
    NR_OF_NONE = 0

    
    # ########### These following two methods are what you're supposed to implement  ###########
    # In this method you should generate a new world
    # using randomization according to the given arguments.
    @staticmethod
    def __create_world(size) -> World:
        flat_list_actors = create_flat_list(size)
        NeighborsModel.SIDE = int(sqrt(size))
        brave_new_world = []
        brave_new_world = NeighborsModel.create_new_matrix(flat_list_actors)
        return brave_new_world



    @staticmethod
    def create_new_matrix( flat_list_actors):
        new_matrix = [flat_list_actors[row_count * NeighborsModel.SIDE:(row_count + 1) * NeighborsModel.SIDE] for row_count in range(NeighborsModel.SIDE)]
        return new_matrix

    # This is the method called by the timer to update the world
    # (i.e move unsatisfied) each "frame".
    def __update_world(self):
        none_cord_list = []
        actor_not_satisfied: List[Tuple[int, int]] = []
        for row_num in range(self.SIDE):
            for col_num in range(self.SIDE):
                none_cord_list = self.create_none_matrix(none_cord_list, row_num, col_num)
                actor_color = self.world[row_num][col_num]
                self.neighbourhood_update(row_num, col_num)
                satisfaction = self.get_actor_satisfaction(actor_color)
                not_satisfied = self.is_actor_satisfied(satisfaction)
                if not_satisfied == True:
                    self.update_not_satisfied(row_num, col_num, actor_not_satisfied)
        self.move_actors(none_cord_list, actor_not_satisfied)


    def move_actors(self,none_cord_list, actor_not_satisfied):
        shuffle(actor_not_satisfied)
        for x, y in actor_not_satisfied:
            new_x,new_y = choice(none_cord_list)
            self.world[new_x][new_y] = self.world[x][y]
            self.world[x][y] = Actor.NONE
            none_cord_list.remove((new_x,new_y))


    def create_none_matrix(self, none_cord_list, row_num, col_num):
        if self.world[row_num][col_num] == Actor.NONE:
            none_cord_list.append((row_num,col_num))
        return none_cord_list

    def update_not_satisfied(self, row_num, col_num,  actor_not_satisfied):
        actor_not_satisfied.append((row_num, col_num))
        return actor_not_satisfied


    def is_actor_satisfied(self, satisfaction):
        if satisfaction < self.THRESHOLD:
            return True


    def get_actor_satisfaction(self, actor_color):
        satisfaction = 1
        colortotal = 8 - self.NR_OF_NONE
        if colortotal == 0:
            colortotal = 1
        elif actor_color == Actor.RED:
           satisfaction = 1 - (self.NR_OF_RED/colortotal)
        elif actor_color == Actor.BLUE:
          satisfaction = 1 - (self.NR_OF_BLUE/colortotal)
        return satisfaction


    def neighbourhood_update(self, row_num, col_num):
        self.zero_all_nr_of()
        start_row_num, end_row_num = (max(0, row_num - 1), min(self.SIDE, row_num + 2))
        start_col_num, end_col_num = (max(0, col_num - 1), min(self.SIDE, col_num + 2))
        for i in range(start_row_num, end_row_num):
            for j in range(start_col_num, end_col_num ):
                if not (i == row_num and j == col_num):
                    if self.world[i][j] == Actor.RED:
                        self.NR_OF_RED += 1
                    elif self.world[i][j] == Actor.BLUE:
                        self.NR_OF_BLUE += 1
                    elif self.world[i][j] == Actor.NONE:
                        self.NR_OF_NONE += 1
        

    def zero_all_nr_of(self):
        self.NR_OF_RED = 0
        self.NR_OF_BLUE = 0
        self.NR_OF_NONE = 0
        self.COLOR_TOTAL = 0

    # ########### the rest of this class is already defined, to handle the simulation clock  ###########
    def __init__(self, size):
        self.world: World = self.__create_world(size)
        self.observers = []  # for enabling discoupled updating of the view, ignore

    def run(self):
        clock = pg.time.Clock()
        running = True
        while running:
            running = self.__on_clock_tick(clock)
        # stop running
        print("Goodbye!")
        pg.quit()

    def __on_clock_tick(self, clock):
        clock.tick(self.FRAME_RATE)  # update no faster than FRAME_RATE times per second
        self.__update_and_notify()
        return self.__check_for_exit()

    # What to do each frame
    def __update_and_notify(self):
        self.__update_world()
        self.__notify_all()

    @staticmethod
    def __check_for_exit() -> bool:
        keep_going = True
        for event in pg.event.get():
            # Did the user click the window close button?
            if event.type == pg.QUIT:
                keep_going = False
        return keep_going

    # Use an Observer pattern for views
    def add_observer(self, observer):
        self.observers.append(observer)

    def __notify_all(self):
        for observer in self.observers:
            observer.on_world_update()


# ------- Testing -------------------------------------

# Here you run your tests i.e. call your logic methods
# to see that they really work
def test():
    # A small hard coded world for testing
    test_world = [
        [Actor.RED, Actor.RED, Actor.NONE],
        [Actor.NONE, Actor.BLUE, Actor.NONE],
        [Actor.RED, Actor.NONE, Actor.BLUE]
    ]

    th = 0.5  # Simpler threshold used for testing

    size = len(test_world)
    print(is_valid_location(size, 0, 0))
    print(not is_valid_location(size, -1, 0))
    print(not is_valid_location(size, 0, 3))
    print(is_valid_location(size, 2, 2))

    # TODO More tests

    exit(0)


# Helper method for testing
def count(a_list, to_find):
    the_count = 0
    for a in a_list:
        if a == to_find:
            the_count += 1
    return the_count


# ###########  NOTHING to do below this row, it's pygame display stuff  ###########
# ... but by all means have a look at it, it's fun!
class NeighboursView:
    # static class variables
    WIDTH = 400   # Size for window
    HEIGHT = 400
    MARGIN = 50

    WHITE = (255, 255, 255)
    RED   = (255,   0,   0)
    BLUE  = (  0,   0, 255)

    # Instance methods

    def __init__(self, model: NeighborsModel):
        pg.init()  # initialize pygame, in case not already done
        self.dot_size = self.__calculate_dot_size(len(model.world))
        self.screen = pg.display.set_mode([self.WIDTH, self.HEIGHT])
        self.model = model
        self.model.add_observer(self)

    def render_world(self):
        # # Render the state of the world to the screen
        self.__draw_background()
        self.__draw_all_actors()
        self.__update_screen()

    # Needed for observer pattern
    # What do we do every time we're told the model had been updated?
    def on_world_update(self):
        self.render_world()

    # private helper methods
    def __calculate_dot_size(self, size):
        return max((self.WIDTH - 2 * self.MARGIN) / size, 2)

    @staticmethod
    def __update_screen():
        pg.display.flip()

    def __draw_background(self):
        self.screen.fill(NeighboursView.WHITE)

    def __draw_all_actors(self):
        for row in range(len(self.model.world)):
            for col in range(len(self.model.world[row])):
                self.__draw_actor_at(col, row)

    def __draw_actor_at(self, col, row):
        color = self.__get_color(self.model.world[row][col])
        xy = self.__calculate_coordinates(col, row)
        pg.draw.circle(self.screen, color, xy, self.dot_size / 2)

    # This method showcases how to nicely emulate 'switch'-statements in python
    @staticmethod
    def __get_color(actor):
        return {
            Actor.RED: NeighboursView.RED,
            Actor.BLUE: NeighboursView.BLUE
        }.get(actor, NeighboursView.WHITE)

    def __calculate_coordinates(self, col, row):
        x = self.__calculate_coordinate(col)
        y = self.__calculate_coordinate(row)
        return x, y

    def __calculate_coordinate(self, offset):
        x: float = self.dot_size * offset + self.MARGIN
        return x


if __name__ == "__main__":
    neighbours()
